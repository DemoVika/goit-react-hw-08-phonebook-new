{"version":3,"file":"static/js/745.feb5e16d.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.js","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.js","components/Filter/Filter.js","webpack://react-homework-template/./src/pages/Contacts/Contacts.module.css?fb9d","pages/Contacts/Contacts.js"],"sourcesContent":["export const selectLoading = state => state.contacts.loading;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectAllContacts = state => state.contacts.items;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport { selectAllContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport {\n  FormControl,\n  FormLabel,\n  Input,\n  Button,\n  InputLeftElement,\n  InputGroup,\n  Icon,\n} from '@chakra-ui/react';\nimport { FaPhoneAlt, FaUser } from 'react-icons/fa';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(selectAllContacts);\n  const dispath = useDispatch();\n\n  const handleInput = event => {\n    const { name, value } = event.currentTarget;\n    if (name === 'name') {\n      setName(value);\n    } else if (name === 'number') {\n      setNumber(value);\n    }\n  };\n\n  const nameId = event => {\n    event.preventDefault();\n    if (contacts.find(item => item.name === name)) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n    const contact = {\n      name, //: name\n      number, //: number\n    };\n    dispath(addContact(contact));\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={nameId}>\n      <FormControl isRequired={true}>\n        <FormLabel>Name</FormLabel>\n        <InputGroup>\n          <Input\n            borderColor=\"teal.500\"\n            boxShadow=\"lg\"\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={name}\n            onChange={handleInput}\n            placeholder=\"Contact name\"\n          />\n          <InputLeftElement pointerEvents=\"none\">\n            <Icon as={FaUser} color=\"teal.600\" />\n          </InputLeftElement>\n        </InputGroup>\n\n        <FormLabel>Number</FormLabel>\n        <InputGroup>\n          <Input\n            borderColor=\"teal.500\"\n            boxShadow=\"lg\"\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={number}\n            onChange={handleInput}\n            placeholder=\"Phone number\"\n          />\n          <InputLeftElement pointerEvents=\"none\">\n            <Icon as={FaPhoneAlt} color=\"teal.600\" />\n          </InputLeftElement>\n        </InputGroup>\n\n        <Button\n          type=\"submit\"\n          colorScheme=\"teal\"\n          variant=\"solid\"\n          boxShadow=\"lg\"\n          w=\"250px\"\n          size=\"md\"\n          mt=\"10px\"\n          mb=\"8px\"\n        >\n          Add contact\n        </Button>\n      </FormControl>\n    </form>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"item\":\"ContactList_item__EZYHO\",\"button\":\"ContactList_button__7kL4l\"};","import PropTypes from 'prop-types';\nimport css from './ContactList.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectAllContacts, selectFilter } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { Button } from '@chakra-ui/react';\n\nconst visibleContacts = (contacts, filter) => {\n  return contacts.filter(contact => {\n    return contact.name.toLowerCase().includes(filter.toLowerCase());\n  });\n};\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectAllContacts);\n  const filter = useSelector(selectFilter);\n  const dispath = useDispatch();\n  const handleDeleteItems = id => {\n    dispath(deleteContact(id));\n  };\n\n  return (\n    <ul className={css.list}>\n      {visibleContacts(contacts, filter).map(item => {\n        return (\n          <li className={css.item} key={item.id}>\n            {item.name} {item.number}\n            <Button\n              className={css.button}\n              colorScheme=\"teal\"\n              variant=\"outline\"\n              boxShadow=\"lg\"\n              size=\"xs\"\n              onClick={() => handleDeleteItems(item.id)}\n            >\n              Delete\n            </Button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nContactList.protoTypes = {\n  contacts: PropTypes.arrayOf({\n    name: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n  filter: PropTypes.string.isRequired,\n};\n","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/slice';\nimport {\n  FormControl,\n  FormLabel,\n  Input,\n  InputLeftElement,\n  InputGroup,\n  Icon,\n} from '@chakra-ui/react';\nimport { FaSistrix } from 'react-icons/fa';\n\nexport const Filter = () => {\n  const dispath = useDispatch();\n  const updateFilter = filter => {\n    dispath(setFilter(filter));\n  };\n  return (\n    <FormControl>\n      <FormLabel>Find contacts by name</FormLabel>\n      <InputGroup>\n        <Input\n          borderColor=\"teal.500\"\n          boxShadow=\"lg\"\n          mb=\"8px\"\n          type=\"text\"\n          placeholder=\"Contact name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          onChange={event => {\n            updateFilter(event.currentTarget.value);\n          }}\n        />\n        <InputLeftElement pointerEvents=\"none\">\n          <Icon as={FaSistrix} color=\"teal.600\" />\n        </InputLeftElement>\n      </InputGroup>\n    </FormControl>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Contacts_container__WzsIr\"};","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { selectLoading } from 'redux/contacts/selectors';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Box } from '@chakra-ui/react';\nimport css from './Contacts.module.css';\nimport background from '../../images/fixiki-8b.jpg';\nimport { Spinner } from '@chakra-ui/react';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Box pos=\"relative\" h=\"auto\" bg=\"rgba(255,0,0,0.1)\" bgImage={background}>\n      <div style={css.container}>\n        <Helmet>\n          <title>Your contacts</title>\n        </Helmet>\n        <div>{isLoading && <Spinner />}</div>\n        <ContactForm />\n        <Filter />\n        <b>Your contacts</b>\n        <ContactList />\n      </div>\n    </Box>\n  );\n}\n"],"names":["selectLoading","state","contacts","loading","selectFilter","filter","selectAllContacts","items","ContactForm","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","number","setNumber","useSelector","dispath","useDispatch","handleInput","event","_event$currentTarget","currentTarget","value","_jsx","onSubmit","preventDefault","find","item","alert","concat","contact","addContact","children","_jsxs","FormControl","isRequired","FormLabel","InputGroup","Input","borderColor","boxShadow","type","pattern","title","required","onChange","placeholder","InputLeftElement","pointerEvents","Icon","as","FaUser","color","FaPhoneAlt","Button","colorScheme","variant","w","size","mt","mb","visibleContacts","toLowerCase","includes","ContactList","className","css","map","onClick","id","deleteContact","protoTypes","PropTypes","Filter","setFilter","FaSistrix","Contacts","dispatch","isLoading","useEffect","fetchContacts","Box","pos","h","bg","bgImage","background","style","Helmet","Spinner"],"sourceRoot":""}